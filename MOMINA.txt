#include <iostream>
#include <vector>

class Product {
public:
    Product(int id, const std::string& name, double price)
        : productId(id), productName(name), price(price) {}

    void displayDetails() const {
        std::cout << "Product ID: " << productId << ", Name: " << productName << ", Price: $" << price << std::endl;
    }

private:
    int productId;
    std::string productName;
    double price;
};

class ShoppingCart {
public:
    void addProduct(const Product& product) {
        products.push_back(product);
    }

    void displayAllProducts() const {
        std::cout << "Products in the shopping cart:" << std::endl;
        for (const auto& product : products) {
            product.displayDetails();
        }
    }

    double calculateTotalCost() const {
        double total = 0.0;
        for (const auto& product : products) {
            total += product.getPrice();
        }
        return total;
    }

private:
    std::vector<Product> products;
};

class User {
public:
    User(int id) : userId(id) {}

    void displayDetails() const {
        std::cout << "User ID: " << userId << std::endl;
    }

    void associateShoppingCart(ShoppingCart* cart) {
        shoppingCart = cart;
    }

    ShoppingCart* getShoppingCart() const {
        return shoppingCart;
    }

private:
    int userId;
    ShoppingCart* shoppingCart = nullptr;
};

int main() {
    // Create instances of products
    Product laptop(1, "Laptop", 999.99);
    Product phone(2, "Phone", 499.99);

    // Create instances of the shopping cart
    ShoppingCart cart1;
    cart1.addProduct(laptop);
    cart1.addProduct(phone);

    // Create instances of users
    User user1(101);
    User user2(102);

    // Demonstrate association
    user1.associateShoppingCart(&cart1);

    // Demonstrate aggregation
    User user3(103);
    ShoppingCart* cart2 = new ShoppingCart();
    user3.associateShoppingCart(cart2);

    // Demonstrate composition
    ShoppingCart cart3;
    cart3.addProduct(Product(3, "Tablet", 299.99));

    // Display user details and shopping cart contents
    user1.displayDetails();
    user1.getShoppingCart()->displayAllProducts();
    std::cout << "Total cost: $" << user1.getShoppingCart()->calculateTotalCost() << std::endl;

    user3.displayDetails();
    user3.getShoppingCart()->displayAllProducts();

    // Clean up dynamically allocated resources
    delete cart2;

    return 0;
}